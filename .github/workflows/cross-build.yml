name: llvm_cross_build
on:
  workflow_dispatch:
    inputs:
      llvm_mos_repo:
        description: 'llvm-mos repo'
        default: 'llvm-mos/llvm-mos'
        type: string
      llvm_mos_sdk_repo:
        description: 'llvm-mos-sdk repo'
        default: 'llvm-mos/llvm-mos-sdk'
        type: string
      llvm_mos_ref:
        description: 'llvm-mos ref'
        default: '1d7989f2995b83178ef26a28b4edf70bf556096b'
        type: string
      llvm_mos_sdk_ref:
        description: 'llvm-mos-sdk ref'
        default: '777e89e95d389a6a67f7f3c572f7dd2b1730d209'
        type: string

jobs:
  amd64_image:
    if: ${{ false }}
    uses: ./.github/workflows/cross-build-llvm-mos.yml
    with:
      arch: amd64
      llvm_mos_repo: ${{ github.event.inputs.llvm_mos_repo }}
      llvm_mos_sdk_repo: ${{ github.event.inputs.llvm_mos_sdk_repo }}
      llvm_mos_ref: ${{ github.event.inputs.llvm_mos_ref }}
      llvm_mos_sdk_ref: ${{ github.event.inputs.llvm_mos_sdk_ref }}
    secrets: inherit

  arm64_image_tmp:
    if: ${{ false }}
    uses: ./.github/workflows/cross-build-llvm-mos.yml
    with:
      arch: arm64
      arch_suffix: -tmp
      llvm_mos_repo: ${{ github.event.inputs.llvm_mos_repo }}
      llvm_mos_sdk_repo: ${{ github.event.inputs.llvm_mos_sdk_repo }}
      llvm_mos_ref: ${{ github.event.inputs.llvm_mos_ref }}
      llvm_mos_sdk_ref: ${{ github.event.inputs.llvm_mos_sdk_ref }}
    secrets: inherit

  arm64_image:
    if: ${{ false }}
    runs-on: ubuntu-latest
    needs:
      - amd64_image
      - arm64_image_tmp
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set short sha
        id: short_sha
        run: |
          echo "llvm_mos=$(echo ${{ github.event.inputs.llvm_mos_ref }} | cut -b 1-9) >> $GITHUB_OUTPUT
          echo "llvm_mos_sdk=$(echo ${{ github.event.inputs.llvm_mos_sdk_ref }} | cut -b 1-7) >> $GITHUB_OUTPUT

      - name: Build and push fixed arm image
        id: build_fixed_arm_image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: mrkits/llvm-mos:${{ steps.short_sha.outputs.llvm_mos }}-${{ steps.short_sha.outputs.llvm_mos_sdk }}-arm64
          file: docker/llvm-mos/Dockerfile.fix.arm64
          context: .
          platforms: arm64
          build-args: |
            LLVM_MOS_IMAGE=mrkits/llvm-mos:${{ steps.short_sha.outputs.llvm_mos }}-${{ steps.short_sha.outputs.llvm_mos_sdk }}
            TARGETARCH=arm64


  final:
    runs-on: ubuntu-latest
    # needs:
    #   - amd64_image
    #   - arm64_image
    steps:
      - name: cleanup
        run: |
          echo "=============================================================================="
          echo "Freeing up disk space on CI system"
          echo "=============================================================================="

          echo "Listing 100 largest packages"
          dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
          df -h
          echo "Removing large packages"
          sudo apt-get update
          sudo apt-get remove -y '^dotnet-.*' '^llvm-.*' 'aspnetcore.*' 'temurin.*' azure-cli google-cloud-cli \
               microsoft-edge-stable google-chrome-stable firefox powershell mono-devel \
               '^gfortran.*' 'mono-devel' 'libllvm.*' 'mysql-server-core-.*' 'libclang-common.*' \
               '^gcc-10.*' '^gcc-11.*' '^gcc-12.*' '^postgresql.*' 'libclang-cpp.*' '^.*-dev$'
 
          sudo apt-get autoremove -y
          sudo apt-get clean
          df -h
          echo "Removing large directories"
          sudo rm -rf /usr/share/dotnet/ /usr/share/swift /usr/share/miniconda /usr/local/lib/android
          df -h

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set rust-mos short sha
        id: rust_mos
        run: echo -e "::set-output name=short_sha::$(git rev-parse --short HEAD) name=llvm_short_sha::$() "
        # run: echo -e "::set-output name=short_sha::585f6d9c"

      - name: Set short sha
        id: short_sha
        run: |
          echo "llvm_mos=$(echo ${{ github.event.inputs.llvm_mos_ref }} | cut -b 1-9)" >> $GITHUB_OUTPUT
          echo "llvm_mos_sdk=$(echo ${{ github.event.inputs.llvm_mos_sdk_ref }} | cut -b 1-7)" >> $GITHUB_OUTPUT

      - name: clean2
        id: clean2
        run: rm -fr docker/llvm-mos/llvm-mos docker/llvm-mos/llvm-mos-sdk; df -h

      - name: show revisions
        run: "echo rust_mos: ${{ steps.rust_mos.outputs.short_sha }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push rust-mos
        id: build_rust_dist_image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: mrkits/rust-mos:${{ steps.short_sha.outputs.llvm_mos }}-${{ steps.short_sha.outputs.llvm_mos_sdk }}-${{ steps.rust_mos.outputs.short_sha }}-dist
          file: docker/rust-mos/Dockerfile
          context: .
          build-args: |
            LLVM_MOS_IMAGE=mrkits/llvm-mos:${{ steps.short_sha.outputs.llvm_mos }}-${{ steps.short_sha.outputs.llvm_mos_sdk }}
          cache-from: type=registry,ref=mrkits/rust-mos:${{ steps.short_sha.outputs.llvm_mos }}-${{ steps.short_sha.outputs.llvm_mos_sdk }}-${{ steps.rust_mos.outputs.short_sha }}-dist

      - name: Build and push multi-platform rust-mos image
        id: build_rust_multiarch_image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: mrkits/rust-mos:${{ steps.short_sha.outputs.llvm_mos }}-${{ steps.short_sha.outputs.llvm_mos_sdk }}-${{ steps.rust_mos.outputs.short_sha }}
          file: docker/rust-mos/Dockerfile.multiarch
          platforms: linux/amd64,linux/arm64
          context: docker/rust-mos/
          build-args: |
            LLVM_MOS_IMAGE=mrkits/llvm-mos:${{ steps.short_sha.outputs.llvm_mos }}-${{ steps.short_sha.outputs.llvm_mos_sdk }}
            RUST_MOS_DIST_IMAGE=mrkits/rust-mos:${{ steps.short_sha.outputs.llvm_mos }}-${{ steps.short_sha.outputs.llvm_mos_sdk }}-${{ steps.rust_mos.outputs.short_sha }}-dist

