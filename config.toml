changelog-seen = 2
[build]
# Use this directory to store build artifacts.
# You can use "$ROOT" to indicate the root of the git repository.
build-dir = "/tmp/rust-mos-build"

docs = false
# Which triples to produce a compiler toolchain for. Each of these triples will
# be bootstrapped from the build triple themselves.
#
# Defaults to just the build triple.

host = [
    "x86_64-unknown-linux-gnu",
    "aarch64-unknown-linux-gnu"
]

# Which triples to build libraries (core/alloc/std/test/proc_macro) for. Each of
# these triples will be bootstrapped from the build triple themselves.
#
# Defaults to `host`. If you set this explicitly, you likely want to add all
# host triples to this list as well in order for those host toolchains to be
# able to compile programs for their native target.
#target = ["x86_64-unknown-linux-gnu"] (as an example)

extended = true
tools = ["cargo", "clippy", "rustfmt", "src"] # + "rust-demangler" if `profiler`
# tools = ["cargo"]

[target.x86_64-unknown-linux-gnu]

# Path to the `llvm-config` binary of the installation of a custom LLVM to link
# against. Note that if this is specified we don't compile LLVM at all for this
# target.

llvm-config = "/usr/local/bin/llvm-config"
llvm-has-rust-patches = false

[target.aarch64-unknown-linux-gnu]

cc = "aarch64-linux-gnu-gcc-11" # (path)

# C++ compiler to be used to compile C++ code (e.g. LLVM and our LLVM shims).
# This is only used for host targets.
# See `src/bootstrap/cc_detect.rs` for details.
cxx = "aarch64-linux-gnu-g++-11" # (path)

# Archiver to be used to assemble static libraries compiled from C/C++ code.
# Note: an absolute path should be used, otherwise LLVM build will break.
#ar = "ar" (path)

ar = "aarch64-linux-gnu-gcc-ar-11"

# Ranlib to be used to assemble static libraries compiled from C/C++ code.
# Note: an absolute path should be used, otherwise LLVM build will break.
#ranlib = "ranlib" (path)

# Linker to be used to bootstrap Rust code. Note that the
# default value is platform specific, and if not specified it may also depend on
# what platform is crossing to what platform.
# Setting this will override the `use-lld` option for Rust code when targeting MSVC.
#linker = "cc" (path)

llvm-config = "/arm64-sysroot/usr/local/bin/llvm-config"
llvm-has-rust-patches = false

[llvm]
download-ci-llvm = false

[dist]
compression-formats = ["gz"]
